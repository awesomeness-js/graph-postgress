/**
 * This file is auto-generated by the build script.
 * It consolidates API functions for use in the application.
 * Do not edit manually.
 */
import _edge_add from './src/edge/add.js';
import _edge_addMultiple from './src/edge/addMultiple.js';
import _edge_delete from './src/edge/delete.js';
import _edge_deleteMultiple from './src/edge/deleteMultiple.js';
import _edge_get from './src/edge/get.js';
import _edge_getMultiple from './src/edge/getMultiple.js';
import _edge_search from './src/edge/search.js';
import _init from './src/init.js';
import _kv_add from './src/kv/add.js';
import _kv_addMultiple from './src/kv/addMultiple.js';
import _kv_delete from './src/kv/delete.js';
import _kv_deleteMultiple from './src/kv/deleteMultiple.js';
import _kv_get from './src/kv/get.js';
import _kv_getMultiple from './src/kv/getMultiple.js';
import _utils_config from './src/utils/config.js';
import _utils_createDB from './src/utils/createDB.js';
import _utils_pool from './src/utils/pool.js';
import _vertex_add from './src/vertex/add.js';
import _vertex_addMultiple from './src/vertex/addMultiple.js';
import _vertex_delete from './src/vertex/delete.js';
import _vertex_deleteMultiple from './src/vertex/deleteMultiple.js';
import _vertex_get from './src/vertex/get.js';
import _vertex_getMultiple from './src/vertex/getMultiple.js';
import _vertex_search from './src/vertex/search.js';

export { _init as init };

export default {
    init: _init,
    edge: {
        add: _edge_add,
        addMultiple: _edge_addMultiple,
        delete: _edge_delete,
        deleteMultiple: _edge_deleteMultiple,
        get: _edge_get,
        getMultiple: _edge_getMultiple,
        search: _edge_search,
    },
    kv: {
        /**
        * Adds a key-value pair to the storage.
        *
        * @param {string} key - The key to add.
        * @param {string} value - The value to associate with the key.
        * @returns {Promise<void>} A promise that resolves when the key-value pair has been added.
        */
        add: _kv_add,
        /**
         * Adds multiple key-value pairs to the database.
         * 
         * @example graph.kv.addMultiple({
         *    key1: { some: 'data' },
         *    key2: 'some string'
         * });
         *
         * @param {Object} dictionary - An object containing key-value pairs to be added.
         * @param {Object} options - Options for the batch insertion.
         * @param {number} [options.batchSize=settings.defaultBatchSize] - The number of key-value pairs to insert in each batch.
         * @returns {Promise<Object>} - The original dictionary object.
         * @throws {Object} - Throws an error if a key is invalid or if the database insertion fails.
         */
        addMultiple: _kv_addMultiple,
        delete: _kv_delete,
        deleteMultiple: _kv_deleteMultiple,
        get: _kv_get,
        getMultiple: _kv_getMultiple,
    },
    utils: {
        config: _utils_config,
        createDB: _utils_createDB,
        pool: _utils_pool,
    },
    vertex: {
        /**
         * Adds a single vertex to the graph.
         *
         * @param {Object} vertex - The vertex object to be added.
         * @param {string} vertex.type - The type of the vertex.
         * @param {string} vertex.id - The ID of the vertex. If not provided, a UUID will be generated.
         * @param {Object} vertex.example - any other properties of the vertex.
         * @returns {Promise<Object>} A promise that resolves to the added vertex.
         */
        add: _vertex_add,
        /**
         * Adds multiple vertices to the database.
         * 
         * @example graph.vertices.addMultiple([
         *    { id: 'this uuid will be used', type: 'Person', name: 'Alice' },
         *    { type: 'City', name: 'Wonderland' } // id will be generated
         * ]);
         *
         * @param {Array<Object>} vertices - An array of vertex objects to be added.
         * @param {Object} options - Options for the batch insertion.
         * @param {number} [options.batchSize=settings.defaultBatchSize] - The number of vertices to insert in each batch.
         * @returns {Promise<Array>} - An array of inserted vertices with all properties.
         * @throws {Object} - Throws an error if a vertex type is invalid or if the database insertion fails.
         */
        addMultiple: _vertex_addMultiple,
        delete: _vertex_delete,
        deleteMultiple: _vertex_deleteMultiple,
        get: _vertex_get,
        getMultiple: _vertex_getMultiple,
        search: _vertex_search,
    },
};